<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>a = 0; //alpha level for transition fade
fade = 1; //equals 1 while fading out, and -1 while fading back in.
trans_time = 5;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (trans_time &gt; 0)
{
 trans_time -=1;
}

if (trans_time == 0) //If our wait time is up, then draw rectangle
{
    //Here we modify the fade variable.
    a = clamp(a + (fade * 0.02),0,1);
    //clamp takes a variable value and restricts it between to preset values. In our case less than 1 but greater than 0.
    if (a == 1 &amp;&amp; trans_time == 0) //if rectangle is fully drawn, or solid black
    {
      room_goto(rm_0);
      fade = -1;
    }
    
    if (a == 0) &amp;&amp; (fade == -1) //if we are fading back in...
    {
      instance_destroy();
    }
    
    //draw the rectangle based on variable value
    
    draw_set_color(c_black);
    draw_set_alpha(a);
    draw_rectangle(view_xview[0],  //get x coordinate of current camera
    view_yview[0], //get y coordinate
    view_xview[0] + view_wview[0], //get x coordinate plus the width
    view_yview[0] + view_hview[0], 0 //get the y coordinate plus the height
    ) //final 0 determines outline
    
    draw_set_alpha(1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
