<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_arrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menu[0] = obj_start_game_button;
menu[1] = obj_exit_game_button;
global.mpos = 0; //menu position
speed = 0; //movement speed is 0 by default

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
move_left = (keyboard_check_pressed(vk_left)) ||  (keyboard_check_pressed("A")); //takes the largest value out of the ones it's given
move_right = keyboard_check_pressed(vk_right) || keyboard_check_pressed("D"); 

move_gamepad_left = gamepad_button_check_pressed(0, gp_padl);
move_gamepad_right = gamepad_button_check_pressed(0, gp_padr);
mpos = 0;

if (mpos == 1 || mpos == -1)
  {
    global.start_game_selected = false;
  }


  if (move_right)
  {
    mpos += 1;
  }
  else if (move_left)
  {
    mpos -= 1;
  }
  
   if (mpos == 1 &amp;&amp; move_right)
  {
    mpos -= 1;
  }
  else if (mpos == -1 &amp;&amp; move_left)
  {
    mpos += 1;
  }
  
   //Controller menu navigation fully functional 2/07/2017
  //Same statement with d-pad input
  if (move_gamepad_right)
  {
    mpos += move_gamepad_right;
    
  }
  
  else if (move_gamepad_left)
  {
    mpos -= move_gamepad_left;
  }
  
   if (mpos == 1 &amp;&amp; move_gamepad_right)
  {
    mpos -= 1;
  }
  else if (mpos == -1 &amp;&amp; move_gamepad_left)
  {
    mpos += 1;
  }
  
  
  
 
  

var push = 0; //allows for multiple inputs that do the same thing.
var key_start = keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0, gp_face1);

  
  //Checking for button object collisions and taking approprite action:
  //This huge chunk will only move the arrow. The other statments above handle the mpos boolean.
  //Beginning of Start Demo button chunk:
  if (global.start_game_selected &amp;&amp; point_distance(x, y, obj_start_game_button.x + 40, obj_start_game_button.y + 40) != 0)
  {
    move_towards_point(obj_start_game_button.x + 40, obj_start_game_button.y + 40, 10); //move towards this point at 10 pixels/frame
    push = 0;
  }
  if (point_distance(x, y, obj_start_game_button.x + 40, obj_start_game_button.y + 40) == 0)
  {
    speed = 0;
  }
  
  //If arrow is over start demo button and no longer moving and right is pressed:
  if (global.start_game_selected &amp;&amp; point_distance(x, y, obj_start_game_button.x + 40, obj_start_game_button.y + 40) == 0 &amp;&amp; speed == 0 &amp;&amp; move_right || move_gamepad_right)
  {
    move_towards_point(obj_exit_game_button.x + 40, obj_exit_game_button.y + 40, 10);
  }
  
  //Same thing for the left stick or arrow key.
  else if (global.start_game_selected &amp;&amp; point_distance(x, y, obj_start_game_button.x + 40, obj_start_game_button.y + 40) == 0 &amp;&amp; speed == 0 &amp;&amp; move_left || move_gamepad_left)
  {
    move_towards_point(obj_exit_game_button.x + 40, obj_exit_game_button.y + 40, 10);
  }
  //End Start Demo Button Chunk
  
  //Beginning of Exit Game button chunk:
  if (!global.start_game_selected &amp;&amp; point_distance(x, y, obj_exit_game_button.x + 40, obj_exit_game_button.y + 40) != 0 &amp;&amp; key_start)
  {
    move_towards_point(obj_exit_game_button.x + 40, obj_exit_game_button.y + 40, 10); //move towards this point at 15 pixels/frame
    push = 0; //prevent script from being called until arrow reaches destination.
  }
  
  if (!global.start_game_selected &amp;&amp; point_distance(x, y, obj_exit_game_button.x + 40, obj_exit_game_button.y + 40) == 0)
  {
    speed = 0;
  }
  
  if (!global.start_game_selected &amp;&amp; point_distance(x, y, obj_start_game_button.x + 40, obj_start_game_button.y + 40) == 0 &amp;&amp; speed == 0 &amp;&amp; move_right || move_gamepad_right)
  {
    move_towards_point(obj_start_game_button.x + 40, obj_start_game_button.y + 40, 10);
  }
  
  //Same thing for the left stick or arrow key.
  else if (global.start_game_selected &amp;&amp; point_distance(x, y, obj_start_game_button.x + 40, obj_start_game_button.y + 40) == 0 &amp;&amp; speed == 0 &amp;&amp; move_left || move_gamepad_left)
  {
    move_towards_point(obj_start_game_button.x + 40, obj_start_game_button.y + 40, 10);
  }
  //End Exit Game button chunk
  
  //Safety Measure for Push value.
  //We only want push to = 1 once the arrow has stopped moving on either option and key_start is pressed.
  if (global.start_game_selected &amp;&amp; point_distance(x, y, obj_start_game_button.x + 40, obj_start_game_button.y + 40) == 0 &amp;&amp; speed == 0 &amp;&amp; key_start)
  {
    push = 1;
  }
  else if (!global.start_game_selected &amp;&amp; point_distance(x, y, obj_exit_game_button.x + 40, obj_exit_game_button.y + 40) == 0 &amp;&amp; speed == 0 &amp;&amp; key_start)
  {
    push = 1;
  }

  //And finally, if push = 1...
  if (push == 1)
  {
    scr_menu(); // Call a script
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
