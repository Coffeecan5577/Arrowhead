<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_arrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menu[0] = obj_start_game_button;
menu[1] = obj_exit_game_button;
global.mpos = 0; //menu position

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var move = 0;
move -= max(keyboard_check_pressed(vk_left), keyboard_check_pressed(ord("A")), 0); //takes the largest value out of the ones it's given
move += max(keyboard_check_pressed(vk_right), keyboard_check_pressed(ord("D")), 0);

var move_gamepad = 0; //variable for controller input.
move_gamepad -= gamepad_button_check_pressed(0, gp_padl);
move_gamepad += gamepad_button_check_pressed(0, gp_padr);

  if (move != 0)
  {
    mpos += move; //Add to the menu position
    if (mpos &lt; 0)
    {
      mpos = array_length_1d(menu) - 1; //length returns the number of items in a single dimensional array. No sixth index in array.
    }
    if (mpos &gt; array_length_1d(menu) - 1)
    {
      mpos = 0; //move menu position back to 0
    }
  }
  
   //Controller menu navigation fully functional 2/07/2017
  //Same statement with d-pad input
  if (move_gamepad != 0)
  {
    mpos += move_gamepad;
    
    if (mpos &lt; 0)
    {
        mpos = array_length_1d(menu) - 1; //length returns the number of items in a single dimensional array. No sixth index in array.
    }
    
    if (mpos &gt; array_length_1d(menu) - 1)
    {
        mpos = 0; //move menu position back to 0
    }
    
  }
  

global.push; //allows for multiple inputs that do the same thing.
push = max(keyboard_check_released(vk_enter), keyboard_check_released(vk_shift), keyboard_check_released(vk_space), 0) || gamepad_button_check_pressed(0, gp_face1); //returns biggest value
  if (push == 1)
  {
    scr_menu(); // Call a script
  }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//drawing the arrow
draw_sprite(sprite_index, 0, x.obj_start_game_button + 40, y.obj_start_game_button + 45);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
