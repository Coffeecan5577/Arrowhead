<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_arrow_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_grass_top_mid</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.2; //Gravity
hsp = 0; //Horizontal Speed
vsp = 0; //Vertical Speed
movespeed = 4;
jumps = 0;
dir = 1; //indicates which way Arrowhead is facing based on move value
global.num_of_hits = 0; //health

//Setting a deadzone for the gamepad analog sticks
gamepad_set_axis_deadzone(0, 0.3);

max_jumps = 1; //maximum number of jumps total

jumpspeed_normal = 7;
jumpspeed_powerup = 10;

jumpspeed = jumpspeed_normal;


key_down = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0, 0, obj_return_main_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpspeed = jumpspeed_normal;
sprite_index = spr_player_fall;

//This code is set to execute when the alarm expires
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Player's Input:
var player_input = true; //determines whether or not we can move
if (player_input == true)
{
key_right = keyboard_check(vk_right) || (gamepad_axis_value(0, gp_axislh) &gt; 0); //Check for right key input: returns a 1 if pressed. Same applies to right side of analog stick on controller
key_left = -(keyboard_check(vk_left) || (gamepad_axis_value(0, gp_axislh) &lt; 0)); //returns a negative value for the opposite direction
key_jump = keyboard_check_pressed(vk_space) || (gamepad_button_check_pressed(0, gp_face1)); //Check if space is pressed
key_jump_held = keyboard_check(vk_space) || gamepad_button_check(0, gp_face1);
}
else
{
    //disable player input
}

global.key_launch_prep = keyboard_check(vk_shift) || gamepad_button_check(0, gp_shoulderrb);
key_down = keyboard_check(vk_down);
gamepad_start = keyboard_check_pressed(vk_escape) || gamepad_button_check_pressed(0, gp_start);
if (gamepad_start)
{
    global.pause = 1;
    room_goto(rm_pause_room);
    exit;
}
else if (gamepad_start &amp;&amp; global.pause == 1)
{
    global.pause = 0;
    room_goto(rm_0);
}

//React to inputs:
move = key_left + key_right;
hsp = move * movespeed; //movespeed was 2
if (key_right)
{
    dir = 1;
}
else if (key_left)
{
    dir = -1;
}

  if (vsp &lt; 10)
  {
    vsp += grav; //gravity was 0.2
  }

  if (place_meeting(x, y + 1, obj_ground_top_mid)) //Checking one pixel below our sprite
    {
       jumps = max_jumps; //set our number of jumps to 2
    }

    if (key_jump) &amp;&amp; (jumps &gt; 0)
    {
      jumps -= 1;
      vsp =- jumpspeed;
      audio_play_sound(snd_jump, 0, false);
    }

    if (key_jump) &amp;&amp; (place_meeting(x + 1, y, obj_ground_top_mid) || place_meeting(x - 1, y, obj_ground_top_mid))
      {
        vsp = -jumpspeed;
      }

    if (vsp &lt; 0) &amp;&amp; (!key_jump_held)
    {
      vsp = max(vsp, -jumpspeed / 4);
    }
    if (vsp &gt; 0 &amp;&amp; jumps &gt; 0)
    {
        jumps = 0; //if we fall off a ledge and have not jumped, do not let the player jump.
    }

//Horizontal Collisions
  if (place_meeting(x + hsp, y, obj_ground_top_mid)) //Check for collision before we move in that space
  {
    //If we are about to collide, slowly move up until the collision happens.
    while(!place_meeting(x + sign(hsp) , y, obj_ground_top_mid))
    {
      x += sign(hsp);
    }
    hsp = 0;
  }
  x += hsp;
  

  //Vertical Collisions
    if (place_meeting(x, y + vsp, obj_ground_top_mid)) //Check for collision before we move in that space
  {
    //If we are about to collide, slowly move up until the collision happens.
    while(!place_meeting(x, y + sign(vsp), obj_ground_top_mid))
    {
      y += sign(vsp);
    }
    vsp = 0;
  }
  y += vsp;
  
  
//Animation and drawing sprites based on movement:

if (move != 0)
  {
    image_xscale = move; //set the horizontal scale of our sprite to our current direction.
  }
  if (place_meeting(x, y + 1, obj_ground_top_mid)) //checking for floor
  {
    if (move != 0) sprite_index = spr_arrow_running; else sprite_index = spr_arrow_idle;
  }
  else
  {
   if (vsp &lt; 0) sprite_index = spr_arrow_jump; else sprite_index = spr_arrow_falling; //checking if our jump speed is increasing
  }
 
  //Animation Speeds test:
  
  //Idle Speed
  if(sprite_index == spr_arrow_idle)
  {
    image_speed = 0.1;
    if (image_index &gt; image_number)
    {
        image_index = 0;
        image_speed = 0.1;
    }
  }
  //Running Speed:
  else if (sprite_index == spr_arrow_running)
  {
    image_speed = 0.4;
  }
  //Jump animation speed:
  else if (sprite_index == spr_arrow_jump)
  {
    image_speed = 0.2;
    image_index = 0;
  }
  //Falling speed 
  else if (sprite_index == spr_arrow_falling)
  {
    image_speed = 0.2;
  }
  //Damage animation speed
  else if (sprite_index == spr_arrow_damage_fall)
  {
    image_speed = 0.3;
  }
  
   
  //Testing out sound and death parts:
  //If Arrowhead collides with the instakill object, stop the background music
  //, set an alarm, and when that alarm goes off, play some kind of death jingle.
  
  //Next, we want an instance of the fade object to be created after the jingle is done
  //playing, that way the level restarts.
  
  
    //Testing death
    if (place_meeting(x, y + 1, obj_instakill) || place_meeting(x + 1, y, obj_instakill) || place_meeting(x - 1, y, obj_instakill))
    {
        global.num_of_hits = 3;
        instance_destroy(); //destroy player.
        scr_death(); //call death script for test.
        player_input = false;
        
    }
    else if (global.num_of_hits == 3)
    {
        instance_destroy();
        scr_death();   
        //play death animation once it is made
        player_input = false;
    }
    
    //Damage animations applied in enemy code.
    //now for reverting back to the idle animation.\
    /*
    if (sprite_index == spr_arrow_damage_fall &amp;&amp; image_index == 6 &amp;&amp; image_speed &gt; 0)
    {
        image_speed = 0;
    }
    
    if(sprite_index == spr_arrow_damage_fall &amp;&amp; image_speed &gt; 0 &amp;&amp; image_speed == 0)
    {
        sprite_index = spr_arrow_idle;
    }
    */
  //Health chunk
  
  //collison enemy check
  

  
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_arrowtip">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_arrowtip)
{
    audio_stop_sound(snd_bg_level);
    audio_play_sound(snd_arrowtip_collect, 0, false);
    instance_destroy();
}
player_input = false;

alarm[1] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_dmg_impact, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
